// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MANAGER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          Role            @default(USER)
  password      String?
  accounts      Account[]
 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
 
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Section {
  id           String                @id
  sectionName_ru  String?
  sectionName_en  String?
  sectionName_ky  String?
  heading_ru          String?
  heading_en          String?
  heading_ky          String?
  subheading_ru    String?
  subheading_en    String?
  subheading_ky    String?
  primaryButton_ru  String?
  primaryButton_en  String?
  primaryButton_ky  String?
  secondaryButton_ru String?
  secondaryButton_en String?
  secondaryButton_ky String?
  cards        Card[]

  @@index([id])
  @@map("sections")
}

model Card {
  id        String  @id @default(cuid())
  sectionId String
  title_ru      String?
  title_en      String?
  title_ky      String?
  description_ru      String?
  description_en      String?
  description_ky      String?
  extra_ru      String?
  extra_en      String?
  extra_ky      String?
  bullets_ru      String[]
  bullets_en      String[]
  bullets_ky      String[]
  image   String?

  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, id])
  @@map("cards")
}

model Social {
  id        String  @id @default(cuid())
  name      String
  link      String
  icon      String

  @@map("socials")
}

model Contact {
  id        String  @id @default(cuid())
  name_ru      String?
  name_en      String?
  name_ky      String?
  link      String
  icon      String

  @@map("contacts")
}

model Article {
  id        String  @id @default(cuid())
  title_ru      String?
  title_en      String?
  title_ky      String?
  content_ru      String?
  content_en      String?
  content_ky      String?
  image      String
  slug      String
  linkName  String
  linkHref  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  socials  ArticleSocial[]

  @@index([slug])
  @@map("articles")
}

model ArticleSocial {
  id        String  @id @default(cuid())
  name      String
  link      String
  icon      String
  articleId String

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_socials")
}